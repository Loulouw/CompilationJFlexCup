/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 * auteur : azim.roussanaly@univ-lorraine.fr
 * (c) 2013
 */ 
package fr.ul.miage.exemple.generated;

import java.util.*;
import fr.ul.miage.exemple.*;

/* Fonctions */
action code 
{:
	private int rang = 0;
 	public void ajouterSymbol(String str){
		String values[] = str.split(",");
		for(String value : values){
			String s[] = value.split(" ");
			try{
				int val = 0;
				if(s.length == 2) val = Integer.parseInt(s[1].trim());
				SymbolVar sym = new SymbolVar(s[0].trim(), "int", "glob", val, rang);
				System.out.println(sym);
				rang ++;
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	}
:}

/* la grammaire */
terminal CRO_OUVR, CRO_FERM, RETOUR, ESPACE, PV, VIRG;
terminal COMMENTAIRE;
terminal FUNC, NOM, NOMBRE, RETURN;
terminal INT, NOTHING;
terminal PLUS,MOINS,FOIS,DIV,PO,PF,EGAL,INF,SUP,DIFF;
terminal SI,SINON,TQ;
terminal LIRE,ECRIRE;


non terminal l, ligne, fonction, actions, content_function, content_function_list;
non terminal type, declaration_var,declaration_var_mul_nom, declaration_var_mul, declaration_var_mul_value, declaration_value;
non terminal affectation, calcul;
non terminal return, appel_fonction, param_appel_fonction, param_appel_fonction_rec;
non terminal param_fonction, param_fonction_rec;
non terminal c2,c3,c4,c5;
non terminal si,sinon,tq, condition, s2,s3,s4,s5;
non terminal ecrire;

//Precedences added by Eclipse plugin
precedence nonassoc PO;	// Inserted by Eclipse plugin

start with l;

l				::= actions;

actions			::= actions ligne | /*vide*/;

ligne			::= fonction 
				| COMMENTAIRE 
				| declaration_var:a {: ajouterSymbol(a.toString()); :}
				| declaration_var_mul:a {: ajouterSymbol(a.toString()); :} 
				| RETOUR 
				| ESPACE ;

type			::= INT 
				| NOTHING;

/***********************************************/
/***************FONCTION************************/
/***********************************************/

fonction		::= FUNC ESPACE type ESPACE NOM param_fonction_rec CRO_OUVR content_function CRO_FERM;

param_fonction_rec ::= param_fonction_rec param_fonction | /*vide*/ ;

param_fonction ::= ESPACE type ESPACE NOM VIRG | ESPACE type ESPACE NOM;


content_function	::= content_function content_function_list | /*vide*/ ;

content_function_list ::= RETOUR | COMMENTAIRE | si | tq | ecrire | return | appel_fonction PV | affectation | declaration_var | declaration_var_mul;

return 			::= RETURN ESPACE calcul PV ;

/***********************************************/
/***************FIN FONCTION********************/
/***********************************************/






/***********************************************/
/***************CONDITION/BOUCLE****************/
/***********************************************/
si ::= SI PO condition PF CRO_OUVR content_function CRO_FERM sinon;

sinon ::= SINON CRO_OUVR content_function CRO_FERM | /* vide */;

tq ::= TQ PO condition PF CRO_OUVR content_function CRO_FERM;

condition ::= condition INF s2 | s2;

s2 ::= s2 SUP s3 | s3;

s3 ::= s3 DIFF s4 | s4;

s4 ::= s4 EGAL s5 | s5;

s5 ::= calcul;

/***********************************************/
/***************FIN CONDITION/BOUCLE************/
/***********************************************/







/***********************************************/
/***************CALCUL**************************/
/***********************************************/
calcul ::= calcul:a PLUS c2:b {: RESULT=a.toString() + "+" + b.toString(); :}
		| c2:a {: RESULT=a.toString(); :};

c2 ::= c2:a MOINS c3:b {: RESULT=a.toString() + "-" + b.toString(); :}
		| c3:a {: RESULT=a.toString(); :};

c3 ::= c3:a FOIS c4:b {: RESULT=a.toString() + "*" + b.toString(); :}
		| c4:a {: RESULT=a.toString(); :};

c4 ::= c4:a DIV c5:b {: RESULT=a.toString() + "/" + b.toString(); :}
		| c5:a {: RESULT=a.toString(); :};

c5 ::= appel_fonction :a {: RESULT=a.toString(); :}
	| NOMBRE:a {: RESULT=a.toString(); :}
	| PO calcul PF :a {: RESULT=a.toString(); :}
	| NOM:a {: RESULT=a.toString(); :};


/***********************************************/
/***********FIN CALCUL**************************/
/***********************************************/






/***********************************************/
/***************VARIABLE************************/
/***********************************************/
affectation		::= NOM EGAL declaration_value PV;

declaration_var	::= type ESPACE NOM:n EGAL declaration_value:v PV {: RESULT=n.toString() + " " + v.toString(); :};

declaration_var_mul ::= type ESPACE NOM:n declaration_var_mul_nom:v PV {: RESULT=n.toString() + " " + v.toString(); :};

declaration_var_mul_nom ::= declaration_var_mul_nom VIRG NOM:a declaration_var_mul_value:b {: RESULT="," + a.toString() + " " + b.toString(); :}
						  | /*vide*/ ;

declaration_var_mul_value ::= EGAL declaration_value:a {: RESULT=a.toString(); :}
							| /* vide */ {: RESULT=""; :};

declaration_value ::= LIRE PO PF 
					| calcul:c {: RESULT = c.toString(); :};

ecrire ::= ECRIRE PO calcul PF PV;

/***********************************************/
/***************FIN VARIABLE********************/
/***********************************************/








/***********************************************/
/***************APPEL FONCTION******************/
/***********************************************/

appel_fonction		::= NOM:n PO param_appel_fonction_rec:p PF  {: RESULT=n.toString() + " " + p.toString(); :};

param_appel_fonction_rec ::= param_appel_fonction_rec param_appel_fonction:p {: RESULT = p.toString(); :}
						| /*vide*/;

param_appel_fonction ::= calcul:c {: RESULT=c.toString(); :}
						| VIRG calcul:c {: RESULT=c.toString(); :};

/***********************************************/
/***************FIN APPEL FONCTION**************/
/***********************************************/