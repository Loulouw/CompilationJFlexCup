/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 * auteur : azim.roussanaly@univ-lorraine.fr
 * (c) 2013
 */ 
package fr.ul.miage.exemple.generated;

import java.util.*;
import fr.ul.miage.exemple.symbol.*;
import fr.ul.miage.exemple.arbre.*;
import fr.ul.miage.exemple.utils.*;
import fr.ul.miage.exemple.arbre.calcul.*;
import java.util.regex.*;
import fr.ul.miage.exemple.arbre.condition.*;
import fr.ul.miage.exemple.assembleur.*;

/* Fonctions */
action code 
{:
	private Programme programme = new Programme();
 
	private ArrayList<Noeud> noeudsFonction = new ArrayList<>();
	private ArrayList<Noeud> noeudsCond = new ArrayList<>();
	
	private int rangVarGlobal = 0;

	private Pattern patternVariable = Pattern.compile("^[a-zA-Z]+$");
	private Pattern patternConstante = Pattern.compile("^-?[0-9]+$");
	
 	public void ajouterVar(String str,boolean glob){
		String values[] = str.split(",");
		
		for(String value : values){
			String s[] = value.split("[ \t]+");
			try{
				if(glob){
					int val = 0;
					if(s.length == 2) val = Integer.parseInt(s[1].trim());
					SymbolVarGlob sym = new SymbolVarGlob(s[0].trim(), "int", "glob", val, rangVarGlobal);
					Utils.symbols.add(sym);
					rangVarGlobal ++;
				}else{	
					SymbolVar sym = new SymbolVar(s[0].trim(),"int","loc",Utils.symbolVarsLoc.size());
					Utils.symbolVarsLoc.add(sym);
					String affec = s[0].trim() + " ";
					if(s.length == 2){
						affec += s[1].trim();
					}else{
						affec += "0";
					}
					ajouterAffectation(affec);
				}
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	}



	public void ajouterFunc(String str){
		String values[] = str.split("[ \t]+");
		SymbolFunc sym = new SymbolFunc(values[1].trim(),values[0].trim(),"func",Utils.symbolVarsLoc.size(),Utils.symbolParams.size());
		Utils.symbols.add(sym);

		Fonction fonction = new Fonction(Utils.symbols.size() - 1);
		fonction.getNoeuds().addAll(noeudsFonction);
		programme.ajouterFonction(fonction);

		for(Symbol s : Utils.symbolParams) Utils.symbols.add(s);
		for(Symbol s : Utils.symbolVarsLoc) Utils.symbols.add(s);
		Utils.symbolParams.clear();
		Utils.symbolVarsLoc.clear();
		noeudsFonction.clear();
	}



	public void ajouterParam(String str){
		String values[] = str.split("[ \t]+");
		SymbolVar sym = new SymbolVar(values[1].trim(),"int","param",Utils.symbolParams.size());
		Utils.symbolParams.add(sym);
	}



	public void ajouterAffectation(String str){
		String values[] = str.split("[ \t]+");
		Variable variable = new Variable(Utils.getVariablePlace(values[0].trim()));
		Noeud noeud;
		if(values[1].trim().equals("lire")){
			noeud = new Lire();
		}else{
			noeud = ConvertionArbre.convertirCalcul(values[1].trim());
		}
		
		Affectation affectation = new Affectation(variable,noeud);
		ajouterNoeud(affectation);
	}
	
	public void ajouterRetour(String str){
		Retour retour = new Retour(ConvertionArbre.convertirCalcul(str.trim()));
		ajouterNoeud(retour);
	}

	public void ajouterEcrire(String str){
		Ecrire ecrire = new Ecrire(ConvertionArbre.convertirCalcul(str.trim()));
		ajouterNoeud(ecrire);
	}

	public void ajouterSi(String str){
		String condSplit[] = str.split("[ \t]+");
		Noeud l = ConvertionArbre.convertirCalcul(condSplit[0]);
		Noeud r = ConvertionArbre.convertirCalcul(condSplit[2]);
		Condition condition = new Condition(l,r,condSplit[1]);
		Si si = new Si(condition);

		ajouterNoeud(si);
		noeudsCond.add(si);
	}
	
	public void ajouterTantQue(String str){
		String condSplit[] = str.split("[ \t]+");
		Noeud l = ConvertionArbre.convertirCalcul(condSplit[0]);
		Noeud r = ConvertionArbre.convertirCalcul(condSplit[2]);
		Condition condition = new Condition(l,r,condSplit[1]);
		TantQue tq = new TantQue(condition);

		ajouterNoeud(tq);
		noeudsCond.add(tq);
	}
	
	public void finCond(){
		noeudsCond.remove(noeudsCond.size()-1);
	}
	
	public void setSinon(){
		((Si)noeudsCond.get(noeudsCond.size()-1)).setEtat(false);
	}
	
	public void ajouterNoeud(Noeud n){
		if(noeudsCond.size() > 0){
			Noeud nd = noeudsCond.get(noeudsCond.size()-1);
			if(nd instanceof Si){
				if(((Si)nd).getEtat() ){
					((Si)nd).getValidee().add(n);
				}else{
					((Si)nd).getRefusee().add(n);
				}
			}else{
				((TantQue)nd).getActions().add(n);
			}
			
		}else{
			noeudsFonction.add(n);
		}	
	}

	public void fin(){
		for(int i=0;i<Utils.symbols.size();i++) System.out.println(i + " - " + Utils.symbols.get(i)); 
		System.out.println("\n" + programme);
		Assembleur assembleur = new Assembleur(programme,Utils.symbols);
		assembleur.generer();
	}
	
:}

/* la grammaire */
terminal CRO_OUVR, CRO_FERM, RETOUR, ESPACE, PV, VIRG;
terminal COMMENTAIRE;
terminal FUNC, NOM, NOMBRE, RETURN;
terminal INT, NOTHING;
terminal PLUS,MOINS,FOIS,DIV,PO,PF,EGAL,INF,INFEGAL,SUP,SUPEGAL,DIFF;
terminal SI,SINON,TQ;
terminal LIRE,ECRIRE;


non terminal l, ligne, fonction, actions;
non terminal content_function, content_function_list;
non terminal type, declaration_var,declaration_var_mul_nom, declaration_var_mul, declaration_var_mul_value, declaration_value;
non terminal affectation, calcul;
non terminal return, appel_fonction, param_appel_fonction, param_appel_fonction_rec;
non terminal param_fonction, param_fonction_rec;
non terminal c2,c3,c4,c5;
non terminal si,ouvsi,sinon,ouvsinon,tq,ouvtq, condition, s2,s3,s4,s5,s6,s7;
non terminal ecrire;

//Precedences added by Eclipse plugin
precedence nonassoc PO;	// Inserted by Eclipse plugin

start with l;

l				::= actions {: fin(); :};

actions			::= actions ligne | /*vide*/;

ligne			::= fonction 
				| COMMENTAIRE 
				| declaration_var:a {: ajouterVar(a.toString(),true); :}
				| declaration_var_mul:a {: ajouterVar(a.toString(),true); :} 
				| RETOUR 
				| ESPACE ;

type			::= INT:a {: RESULT=a.toString(); :} 
				| NOTHING:a {: RESULT=a.toString(); :};

/***********************************************/
/***************FONCTION************************/
/***********************************************/

fonction		::= FUNC ESPACE type:a ESPACE NOM:b param_fonction_rec CRO_OUVR content_function CRO_FERM {: ajouterFunc(a.toString() + " " + b.toString()); :};

param_fonction_rec ::= param_fonction_rec param_fonction | /*vide*/ ;

param_fonction ::= ESPACE type:a ESPACE NOM:b VIRG {: ajouterParam(a.toString() + " " + b.toString()); :} 
				| ESPACE type:a ESPACE NOM:b {: ajouterParam(a.toString() + " " + b.toString()); :};


content_function	::= content_function content_function_list | /*vide*/ ;

content_function_list ::= RETOUR | COMMENTAIRE 
						| si {: finCond(); :}
						| tq {: finCond(); :}
						| ecrire:a {: ajouterEcrire(a.toString()); :}
						| return:a {: ajouterRetour(a.toString()); :}
						| appel_fonction PV 
						| affectation:a {: ajouterAffectation(a.toString()); :}
						| declaration_var:a {: ajouterVar(a.toString(),false); :}
						| declaration_var_mul:a {: ajouterVar(a.toString(),false); :};

return 			::= RETURN ESPACE calcul:a PV {: RESULT=a.toString(); :};

/***********************************************/
/***************FIN FONCTION********************/
/***********************************************/






/***********************************************/
/***************CONDITION/BOUCLE****************/
/***********************************************/
si ::= SI PO ouvsi PF CRO_OUVR content_function CRO_FERM sinon;

ouvsi ::= condition:b {: ajouterSi(b.toString()); :};

sinon ::= SINON ouvsinon CRO_OUVR content_function CRO_FERM
		| /* vide */;

ouvsinon ::= {: setSinon(); :};

tq ::= TQ PO ouvtq PF CRO_OUVR content_function CRO_FERM;

ouvtq ::= condition:a {: ajouterTantQue(a.toString()); :};

condition ::= condition:a INFEGAL s2:b {: RESULT=a.toString() + " <= " + b.toString(); :} 
	| s2:a {: RESULT=a.toString(); :};

s2 ::= s2:a SUPEGAL s3:b {: RESULT=a.toString() + " >= " + b.toString(); :}
	| s3:a {: RESULT=a.toString(); :};

s3 ::= s3:a INF s4:b {: RESULT=a.toString() + " < " + b.toString(); :}
	| s4:a {: RESULT=a.toString(); :};

s4 ::= s4:a SUP s5:b {: RESULT=a.toString() + " > " + b.toString(); :}
	| s5:a {: RESULT=a.toString(); :};

s5 ::= s5:a DIFF s6:b {: RESULT=a.toString() + " != " + b.toString(); :}
	| s6:a {: RESULT=a.toString(); :};

s6 ::= s6:a EGAL s7:b {: RESULT=a.toString() + " = " + b.toString(); :} 
	| s7:a {: RESULT=a.toString(); :};

s7 ::= calcul:a {: RESULT=a.toString(); :};

/***********************************************/
/***************FIN CONDITION/BOUCLE************/
/***********************************************/







/***********************************************/
/***************CALCUL**************************/
/***********************************************/
calcul ::= calcul:a PLUS c2:b {: RESULT=a.toString() + "+" + b.toString(); :}
		| c2:a {: RESULT=a.toString(); :};

c2 ::= c2:a MOINS c3:b {: RESULT=a.toString() + "-" + b.toString(); :}
		| c3:a {: RESULT=a.toString(); :};

c3 ::= c3:a FOIS c4:b {: RESULT=a.toString() + "*" + b.toString(); :}
		| c4:a {: RESULT=a.toString(); :};

c4 ::= c4:a DIV c5:b {: RESULT=a.toString() + "/" + b.toString(); :}
		| c5:a {: RESULT=a.toString(); :};

c5 ::= appel_fonction :a {: RESULT=a.toString(); :}
	| NOMBRE:a {: RESULT=a.toString(); :}
	| PO calcul:a PF {: RESULT="(" + a.toString() + ")"; :}
	| NOM:a {: RESULT=a.toString(); :};


/***********************************************/
/***********FIN CALCUL**************************/
/***********************************************/






/***********************************************/
/***************VARIABLE************************/
/***********************************************/
affectation		::= NOM:a EGAL declaration_value:b PV {: RESULT=a.toString() + " " + b.toString();:};

declaration_var	::= type ESPACE NOM:n EGAL declaration_value:v PV {: RESULT=n.toString() + " " + v.toString(); :};

declaration_var_mul ::= type ESPACE NOM:n declaration_var_mul_nom:v PV {: RESULT=n.toString() + " " + v.toString(); :};

declaration_var_mul_nom ::= declaration_var_mul_nom:c VIRG NOM:a declaration_var_mul_value:b {: RESULT=c.toString() + "," + a.toString() + " " + b.toString(); :}
						  | /*vide*/ {:RESULT="";:};

declaration_var_mul_value ::= EGAL declaration_value:a {: RESULT=a.toString(); :}
							| /* vide */ {: RESULT=""; :};

declaration_value ::= LIRE PO PF {: RESULT = "lire"; :}
					| calcul:c {: RESULT = c.toString(); :};

ecrire ::= ECRIRE PO calcul:a PF PV {: RESULT=a.toString(); :};

/***********************************************/
/***************FIN VARIABLE********************/
/***********************************************/








/***********************************************/
/***************APPEL FONCTION******************/
/***********************************************/

appel_fonction		::= NOM:n PO param_appel_fonction_rec:p PF  {: RESULT=n.toString() + "(" + p.toString() +")"; :};

param_appel_fonction_rec ::= param_appel_fonction_rec:a param_appel_fonction:p {: RESULT =a.toString() + p.toString(); :}
						| /*vide*/ {: RESULT = ""; :};

param_appel_fonction ::= calcul:c {: RESULT=c.toString(); :}
						| VIRG calcul:c {: RESULT=","+c.toString(); :};

/***********************************************/
/***************FIN APPEL FONCTION**************/
/***********************************************/